import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import SymbolTable.*;

parser code {:

	public int errNo = 0;
        public int warnNo = 0;

        SymbolTable symbolTable;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParser parser = new MPParser( scanner );
	    parser.parse();
            parser.checkWarnings();

            if ( parser.errNo == 0 && parser.warnNo == 0 )
                    System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
		else
		    System.out.println( "Analiza je zavrsena. Broj sintaksnih gresaka: " + parser.errNo + " Broj upozorenja: " + parser.warnNo);
        }
        catch( Exception e )
        {
		System.out.println(e);
        }
    }

   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def != -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name +
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }
:};

init with {:
symbolTable = new SymbolTable();
:}

//Terminali
terminal MAIN, EXIT, ID, INT, FLOAT, BOOL, ASSIGN, SEMICOLON, PLUS, MINUS, CONST;
terminal FOR, IN, OPENSQUARE, CLOSEDSQUARE, APPLY, TRUE, FALSE, COMM, COLON, COMMA;
terminal INTCONST, FLOATCONST, BOOLCONST;


// Neterminali
non terminal Program, Block, Declarations, Declaration, Expressions;
non terminal Expression, Assignment, ApplyExpression;
non terminal ArrayList NameList;
non terminal Constant Konstanta;
non terminal Type Tip,ArithmeticExpression,TermExpression;

//Prioritet
precedence left PLUS, MINUS;
precedence nonassoc ID;

// Gramatika
start with Program;

//PROGRAM**********************************************************


Program ::= MAIN Block EXIT
{:
    System.out.println("Program! Linija" + parser.getLine());
:};


//BLOK**********************************************************


Block ::= Declarations Expressions
{:
    System.out.println("Blok! Linija" + parser.getLine());
:};


//KONSTANTA**********************************************************


Konstanta ::= INTCONST:c {:
RESULT = new Constant(
parser.symbolTable.getType( "integer" ),
c );

 :} | FLOATCONST:c {:

RESULT = new Constant(
parser.symbolTable.getType( "float" ),
c );
:} | BOOLCONST:c {:

RESULT = new Constant(
parser.symbolTable.getType( "bool" ),
c );

:};


//DEKLARACIJA**********************************************************


Declarations ::= Declarations Declaration
| Declaration
{:
    System.out.println("Declarations! Linija" + parser.getLine());
:};

Declaration ::= Tip:t ID:ime SEMICOLON
{:
        Variable var = parser.symbolTable.getVar( (String) ime );
	if(!parser.symbolTable.addVar((String) ime,t)) {

	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " je vec deklarisana");
	RESULT = parser.symbolTable.getType("unknown" );
	parser.errNo++;
        }

        else { System.out.println("Declaration! Linija"  + parser.getLine()); }
:};


//TIP**********************************************************


Tip ::= INT {:
	RESULT = parser.symbolTable.getType("integer");
        System.out.println("Type: int! Linija" + parser.getLine());
:}
| FLOAT {:
	RESULT = parser.symbolTable.getType("float");
        System.out.println("Type: float! Linija" + parser.getLine());
:}
| BOOL
{:
    RESULT = parser.symbolTable.getType("bool");
    System.out.println("Type: bool! Linija" + parser.getLine());
:};


//EXPRESSIONS**********************************************************


Expressions ::= Expressions SEMICOLON Expression | Expression
{:
    System.out.println("Expressions!Linija" + parser.getLine());
:};

Expression ::= Assignment
| ApplyExpression
{:
    System.out.println("Expression! Linija"  + parser.getLine());
:};


// 6 ASSIGNMENT**********************************************************


Assignment ::= ID:ime ASSIGN ArithmeticExpression:ae
{:
	Variable var = parser.symbolTable.getVar((String) ime);

	if(var == null) {
	System.out.println("Greska u liniji " + parser.getLine() + "\nPromenljiva " + ime + " nije deklarisana");
	parser.errNo++;
        }

        else if(var.type.tkind != ae.tkind && !(var.type.tkind == 1 && ae.tkind == 0)){
        System.out.println("Greska u liniji " + parser.getLine() + ". Ne moze da se dodeli tip " + ae.name + " promenljivoj tipa " + var.type.name  );
        parser.errNo++;
        }

        else {
            var.last_def = parser.getLine();
            System.out.println("Assignment! Linija"  + parser.getLine());
            }
:};


// 7 ARITHMETIC**********************************************************


ArithmeticExpression ::= ArithmeticExpression:ae PLUS TermExpression:var {:

        if(ae == parser.symbolTable.getType( "bool" ) || var == parser.symbolTable.getType( "bool" )) {

        System.out.println("Greska u liniji " + parser.getLine() + ". Ne mogu da se vrse aritmeticke operacije nad tipom promenljive bool");
	RESULT = parser.symbolTable.getType("unknown");
	parser.errNo++;

        }

        else if(ae == parser.symbolTable.getType( "float" )|| var == parser.symbolTable.getType( "float" )) {

        RESULT = parser.symbolTable.getType("float");
        }

        else {
	RESULT = parser.symbolTable.getType( "integer" );
        }
        System.out.println("ArithmeticExpression! Linija"  + parser.getLine());
:}
| ArithmeticExpression:ae MINUS TermExpression:var {:

        if(ae == parser.symbolTable.getType( "bool" ) || var == parser.symbolTable.getType( "bool" )) {

            System.out.println("Greska u liniji " + parser.getLine() + ". Ne mogu da se vrse aritmeticke operacije nad tipom promenljive bool");
            RESULT = parser.symbolTable.getType("unknown");
            parser.errNo++;

            }
        else if(ae == parser.symbolTable.getType( "float" )|| var == parser.symbolTable.getType( "float" )) {

            RESULT = parser.symbolTable.getType( "float" );

            }
        else {

	RESULT = parser.symbolTable.getType( "integer" );

            }

        System.out.println("ArithmeticExpression! Linija"  + parser.getLine());
:}
| TermExpression:te
{:
    RESULT = te;
    System.out.println("ArithmeticExpression! Linija"  + parser.getLine());
:};

TermExpression ::= Konstanta:k
{:
    RESULT = k.type;
    System.out.println("TermExpression! Linija"  + parser.getLine());
:}
| ID:ime
{:
	Variable var = parser.symbolTable.getVar((String) ime);
	if(var == null) {
	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije deklarisana");
	RESULT = parser.symbolTable.getType("unknown");
	parser.errNo++;
	}
	else if(var.last_def == -1) {
		System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije inicijalizovana");
		RESULT = parser.symbolTable.getType("unknown");
		parser.errNo++;
	}

        else {
	var.last_use = parser.getLine();
	RESULT = var.type;
        System.out.println("TermExpression! Linija"  + parser.getLine());
	}
:};

//4,5 APPLY**********************************************************


ApplyExpression ::= FOR ID:ime IN OPENSQUARE NameList:niz CLOSEDSQUARE APPLY Expression
{:
    Variable var = parser.symbolTable.getVar((String) ime);

	if(var == null) {

	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije deklarisana");
	parser.errNo++;

    	}

	else if(var.type.tkind != parser.symbolTable.getVar((String)niz.get(0)).type.tkind) {
			System.out.println("Greska u liniji " + parser.getLine() + ". Iterator mora da bude istog tipa kao elementi liste");
			parser.errNo++;
	}

        else if(var != null){

	boolean greska = false;
	for(int i = 0;i<niz.size();i++) {
		if(parser.symbolTable.getVar((String)niz.get(i)).type.tkind != parser.symbolTable.getVar((String)niz.get(0)).type.tkind) {
			System.out.println("Greska u liniji " + parser.getLine() + ". Sve promenljive u listi moraju da budu istog tipa");
			parser.errNo++;
			greska = true;
			break;
		}
	}

	if(!greska) {
        var.last_def = parser.getLine();
        System.out.println("ApplyExpression! Linija" + parser.getLine());

	}
	}
:};


// 4 NAMELIST**********************************************************


NameList ::= NameList:niz COMMA ID:ime
{:
	Variable var = parser.symbolTable.getVar((String) ime);
	if(var == null) {
	System.out.println("Greska u liniji " + parser.getLine() + "\nPromenljiva " + ime + " nije deklarisana");
	parser.errNo++;
	} else if(var.last_def == -1) {
		System.out.println("Greska u liniji " + parser.getLine() + "\nPromenljiva " + ime + " nije inicijalizovana");
	}

	else {
		RESULT = niz;
		niz.add(ime);
                System.out.println("NameList! Linija "  + parser.getLine());
	}

:}
| ID:ime
{:
	Variable var = parser.symbolTable.getVar((String) ime);

	if(var == null) {

	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije deklarisana");
	parser.errNo++;

	}

        else if(var.last_def == -1) {
		System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije inicijalizovana");
	}

	else {
                RESULT = new ArrayList();
                RESULT.add( ime );
                System.out.println("NameList! Linija "  + parser.getLine());
	}

:};
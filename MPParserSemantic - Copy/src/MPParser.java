
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 18 16:35:51 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 18 16:35:51 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\012\012\000\002\013\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\004\005\001\002\000\004\002\057\001" +
    "\002\000\010\007\014\010\013\011\011\001\002\000\014" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\017\ufffa\001\002\000" +
    "\004\006\055\001\002\000\004\005\054\001\002\000\004" +
    "\006\ufff6\001\002\000\014\006\021\007\014\010\013\011" +
    "\011\017\016\001\002\000\004\006\ufff7\001\002\000\004" +
    "\006\ufff8\001\002\000\006\005\ufff3\013\ufff3\001\002\000" +
    "\004\006\042\001\002\000\014\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\017\ufffb\001\002\000\006\005\ufff4\013\ufff4\001" +
    "\002\000\004\012\026\001\002\000\006\005\uffff\013\024" +
    "\001\002\000\006\005\ufff2\013\ufff2\001\002\000\006\006" +
    "\021\017\016\001\002\000\006\005\ufff5\013\ufff5\001\002" +
    "\000\012\006\030\031\027\032\035\033\033\001\002\000" +
    "\012\005\ufffe\013\ufffe\014\ufffe\015\ufffe\001\002\000\012" +
    "\005\uffec\013\uffec\014\uffec\015\uffec\001\002\000\012\005" +
    "\uffee\013\uffee\014\uffee\015\uffee\001\002\000\012\005\uffed" +
    "\013\uffed\014\uffed\015\uffed\001\002\000\012\005\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\001\002\000\012\005\ufff1\013\ufff1" +
    "\014\036\015\037\001\002\000\012\005\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\001\002\000\012\006\030\031\027\032\035" +
    "\033\033\001\002\000\012\006\030\031\027\032\035\033" +
    "\033\001\002\000\012\005\uffef\013\uffef\014\uffef\015\uffef" +
    "\001\002\000\012\005\ufff0\013\ufff0\014\ufff0\015\ufff0\001" +
    "\002\000\004\020\043\001\002\000\004\021\044\001\002" +
    "\000\004\006\045\001\002\000\006\022\uffe9\030\uffe9\001" +
    "\002\000\006\022\050\030\047\001\002\000\004\006\053" +
    "\001\002\000\004\023\051\001\002\000\006\006\021\017" +
    "\016\001\002\000\006\005\uffeb\013\uffeb\001\002\000\006" +
    "\022\uffea\030\uffea\001\002\000\004\002\000\001\002\000" +
    "\004\013\056\001\002\000\014\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\017\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\003\003\001\001\000\002\001\001\000" +
    "\012\004\007\005\011\006\005\015\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\016\007\021\010\017\011\014\012\022" +
    "\015\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\024\011\014\012\022\001\001\000\002" +
    "\001\001\000\010\014\031\016\033\017\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\031\017\040\001\001\000\006\014\031" +
    "\017\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\051\011\014\012\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

symbolTable = new SymbolTable();

    }



	public int errNo = 0;
        public int warnNo = 0;

        SymbolTable symbolTable;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParser parser = new MPParser( scanner );
	    parser.parse();
            parser.checkWarnings();

            if ( parser.errNo == 0 && parser.warnNo == 0 )
                    System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
		else
		    System.out.println( "Analiza je zavrsena. Broj sintaksnih gresaka: " + parser.errNo + " Broj upozorenja: " + parser.warnNo);
        }
        catch( Exception e )
        {
		System.out.println(e);
        }
    }

   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def != -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name +
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar((String) ime);

	if(var == null) {

	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije deklarisana");
	parser.errNo++;

	}

        else if(var.last_def == -1) {
		System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije inicijalizovana");
	}

	else {
                RESULT = new ArrayList();
                RESULT.add( ime );
                System.out.println("NameList! Linija "  + parser.getLine());
	}


              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar((String) ime);
	if(var == null) {
	System.out.println("Greska u liniji " + parser.getLine() + "\nPromenljiva " + ime + " nije deklarisana");
	parser.errNo++;
	} else if(var.last_def == -1) {
		System.out.println("Greska u liniji " + parser.getLine() + "\nPromenljiva " + ime + " nije inicijalizovana");
	}

	else {
		RESULT = niz;
		niz.add(ime);
                System.out.println("NameList! Linija "  + parser.getLine());
	}


              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ApplyExpression ::= FOR ID IN OPENSQUARE NameList CLOSEDSQUARE APPLY Expression 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
    Variable var = parser.symbolTable.getVar((String) ime);

	if(var == null) {

	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije deklarisana");
	parser.errNo++;

    	}

	else if(var.type.tkind != parser.symbolTable.getVar((String)niz.get(0)).type.tkind) {
			System.out.println("Greska u liniji " + parser.getLine() + ". Iterator mora da bude istog tipa kao elementi liste");
			parser.errNo++;
	}

        else if(var != null){

	boolean greska = false;
	for(int i = 0;i<niz.size();i++) {
		if(parser.symbolTable.getVar((String)niz.get(i)).type.tkind != parser.symbolTable.getVar((String)niz.get(0)).type.tkind) {
			System.out.println("Greska u liniji " + parser.getLine() + ". Sve promenljive u listi moraju da budu istog tipa");
			parser.errNo++;
			greska = true;
			break;
		}
	}

	if(!greska) {
        var.last_def = parser.getLine();
        System.out.println("ApplyExpression! Linija" + parser.getLine());

	}
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ApplyExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TermExpression ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar((String) ime);
	if(var == null) {
	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije deklarisana");
	RESULT = parser.symbolTable.getType("unknown");
	parser.errNo++;
	}
	else if(var.last_def == -1) {
		System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " nije inicijalizovana");
		RESULT = parser.symbolTable.getType("unknown");
		parser.errNo++;
	}

        else {
	var.last_use = parser.getLine();
	RESULT = var.type;
        System.out.println("TermExpression! Linija"  + parser.getLine());
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*TermExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TermExpression ::= Konstanta 
            {
              Type RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = k.type;
    System.out.println("TermExpression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*TermExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ArithmeticExpression ::= TermExpression 
            {
              Type RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type te = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = te;
    System.out.println("ArithmeticExpression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArithmeticExpression ::= ArithmeticExpression MINUS TermExpression 
            {
              Type RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type ae = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type var = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

        if(ae == parser.symbolTable.getType( "bool" ) || var == parser.symbolTable.getType( "bool" )) {

            System.out.println("Greska u liniji " + parser.getLine() + ". Ne mogu da se vrse aritmeticke operacije nad tipom promenljive bool");
            RESULT = parser.symbolTable.getType("unknown");
            parser.errNo++;

            }
        else if(ae == parser.symbolTable.getType( "float" )|| var == parser.symbolTable.getType( "float" )) {

            RESULT = parser.symbolTable.getType( "float" );

            }
        else {

	RESULT = parser.symbolTable.getType( "integer" );

            }

        System.out.println("ArithmeticExpression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ArithmeticExpression ::= ArithmeticExpression PLUS TermExpression 
            {
              Type RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type ae = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type var = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

        if(ae == parser.symbolTable.getType( "bool" ) || var == parser.symbolTable.getType( "bool" )) {

        System.out.println("Greska u liniji " + parser.getLine() + ". Ne mogu da se vrse aritmeticke operacije nad tipom promenljive bool");
	RESULT = parser.symbolTable.getType("unknown");
	parser.errNo++;

        }

        else if(ae == parser.symbolTable.getType( "float" )|| var == parser.symbolTable.getType( "float" )) {

        RESULT = parser.symbolTable.getType("float");
        }

        else {
	RESULT = parser.symbolTable.getType( "integer" );
        }
        System.out.println("ArithmeticExpression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Assignment ::= ID ASSIGN ArithmeticExpression 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type ae = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar((String) ime);

	if(var == null) {
	System.out.println("Greska u liniji " + parser.getLine() + "\nPromenljiva " + ime + " nije deklarisana");
	parser.errNo++;
        }

        else if(var.type.tkind != ae.tkind && !(var.type.tkind == 1 && ae.tkind == 0)){
        System.out.println("Greska u liniji " + parser.getLine() + ". Ne moze da se dodeli tip " + ae.name + " promenljivoj tipa " + var.type.name  );
        parser.errNo++;
        }

        else {
            var.last_def = parser.getLine();
            System.out.println("Assignment! Linija"  + parser.getLine());
            }

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= ApplyExpression 
            {
              Object RESULT = null;
		
    System.out.println("Expression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= Assignment 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expressions ::= Expression 
            {
              Object RESULT = null;
		
    System.out.println("Expressions!Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Expressions*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expressions ::= Expressions SEMICOLON Expression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Expressions*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tip ::= BOOL 
            {
              Type RESULT = null;
		
    RESULT = parser.symbolTable.getType("bool");
    System.out.println("Type: bool! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Tip ::= FLOAT 
            {
              Type RESULT = null;
		
	RESULT = parser.symbolTable.getType("float");
        System.out.println("Type: float! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tip ::= INT 
            {
              Type RESULT = null;
		
	RESULT = parser.symbolTable.getType("integer");
        System.out.println("Type: int! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= Tip ID SEMICOLON 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
        Variable var = parser.symbolTable.getVar( (String) ime );
	if(!parser.symbolTable.addVar((String) ime,t)) {

	System.out.println("Greska u liniji " + parser.getLine() + ". Promenljiva " + ime + " je vec deklarisana");
	RESULT = parser.symbolTable.getType("unknown" );
	parser.errNo++;
        }

        else { System.out.println("Declaration! Linija"  + parser.getLine()); }

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declarations ::= Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Declarations! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declarations ::= Declarations Declaration 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Konstanta ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

RESULT = new Constant(
parser.symbolTable.getType( "bool" ),
c );


              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Konstanta ::= FLOATCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

RESULT = new Constant(
parser.symbolTable.getType( "float" ),
c );

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Konstanta ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
RESULT = new Constant(
parser.symbolTable.getType( "integer" ),
c );

 
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= Declarations Expressions 
            {
              Object RESULT = null;
		
    System.out.println("Blok! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN Block EXIT 
            {
              Object RESULT = null;
		
    System.out.println("Program! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

